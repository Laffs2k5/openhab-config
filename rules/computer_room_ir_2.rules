// Imports
import java.util.HashMap
import org.eclipse.xtext.xbase.lib.Functions // Needed for use of lambda
import java.util.concurrent.locks.ReentrantLock // Needed to block rules from triggering in paralell
import java.util.concurrent.TimeUnit

// Constants
val String LOGGER_NAME = "cmpterRoom"
val String IR_MAPFILE = "broadlink.map"

// Scene control commands
val int CONTROL_SCENE_NOCHANGE   = -1
val int CONTROL_SCENE_ALLOFF     = 0  // Turn off receiver + TV
val int CONTROL_SCENE_CHROMECAST = 1  // Turn off receiver + TV and set to chromecast input
val int CONTROL_SCENE_COMPUTER   = 2  // Turn off receiver + TV and set to chromecast input

// Common control commands
val String CONTROL_NOCHANGE = "CONTROL_NOCHANGE"  // do nothing

// TV control commands to ir commands
val HashMap<String, String> g_tvCommandCodes = newHashMap(
     "CONTROL_TV_VOL_MINUS"   ->  "SONY_W5500_VOLUME_DOWN_X3"
    ,"CONTROL_TV_VOL_PLUS"    ->  "SONY_W5500_VOLUME_UP_X3"
    ,"CONTROL_TV_VOL_MUTE"    ->  "SONY_W5500_MUTE_TOGGLE_X5"
    ,"CONTROL_TV_VOL_MINUS70" ->  "SONY_W5500_VOLUME_DOWN_X155"
    ,"CONTROL_TV_VOL_PLUS70"  ->  "SONY_W5500_VOLUME_UP_X155"
    ,"CONTROL_TV_DISP_THMODE" ->  "SONY_W5500_THEATER_MODE_X5"
    ,"CONTROL_TV_DIGIT_1"     ->  "SONY_W5500_DIGIT_1_X5"
    ,"CONTROL_TV_INPUT_HDMI1" ->  "SONY_W5500_INPUT_HDMI_1_X5"
    ,"CONTROL_TV_INPUT_HDMI3" ->  "SONY_W5500_INPUT_HDMI_3_X5"
    ,"CONTROL_TV_INPUT_HDMI4" ->  "SONY_W5500_INPUT_HDMI_4_X5"
    ,"CONTROL_TV_POWER_ON"    ->  "SONY_W5500_POWER_ON_X5"
    ,"CONTROL_TV_POWER_OFF"   ->  "SONY_W5500_POWER_OFF_X5"
)

// Special audio control commands
//  These requires more action than just issuing an IR command
val String CONTROL_AUDIO_POWER_ON = "CONTROL_AUDIO_POWER_ON"
val String CONTROL_AUDIO_POWER_OFF = "CONTROL_AUDIO_POWER_OFF"

// Audio cotrol commands to ir commands
val HashMap<String, String> g_audioCommandCodes = newHashMap(
     "CONTROL_AUDIO_VOL_MINUS"          -> "LOGITECH_Z5500_VOLUMEDOWN_X2"
    ,"CONTROL_AUDIO_VOL_PLUS"           -> "LOGITECH_Z5500_VOLUMEUP_X2"
    ,"CONTROL_AUDIO_VOL_DEF_CC"         -> "LOGITECH_Z5500_VOLUMEUP_X13"
    ,"CONTROL_AUDIO_VOL_DEF_COMPUTER"   -> "LOGITECH_Z5500_VOLUMEUP_X18"
    ,"CONTROL_AUDIO_VOL_ZERO"           -> "LOGITECH_Z5500_VOLUME_BURST_TO_ZERO"
    ,"CONTROL_AUDIO_VOL_MAX"            -> "LOGITECH_Z5500_VOLUME_BURST_TO_MAX"
    ,"CONTROL_AUDIO_VOL_MUTE"           -> "LOGITECH_Z5500_MUTE"
    ,"CONTROL_AUDIO_INPUT_COAX"         -> "LOGITECH_Z5500_SOURCE_COAX_X2"
    ,"CONTROL_AUDIO_INPUT_DIRECT"       -> "LOGITECH_Z5500_SOURCE_DIRECT_X2"
    ,"CONTROL_AUDIO_INPUT_OPTICAL"      -> "LOGITECH_Z5500_SOURCE_OPTICAL_X2"
    ,"CONTROL_AUDIO_POWER_TOGGLE"       -> "LOGITECH_Z5500_POWER_X4"
)

// Globals
var ReentrantLock   g_computerRoomLockTvUpdates = new ReentrantLock()
var ReentrantLock   g_computerRoomLockScenesUpdates = new ReentrantLock()
var ReentrantLock   g_computerRoomLockReceiverUpdates = new ReentrantLock()

// Lambdas
/*
val Functions$Function2<String, GenericItem, Boolean> logStateChange = [
    loggerName,
    itemChanged |
    val String LOGGER = loggerName //+ ".stateChange"
    logInfo(LOGGER, "State of item '{}' changed to '{}'",
        itemChanged.name,
        itemChanged.state.toString())
    true
]
*/
val Functions$Function2<String, GenericItem, Boolean> logReceivedUpdateWithState = [
    loggerName,
    itemUpdated |
    val String LOGGER = loggerName //+ ".logReceivedUpdateWithState"
    logInfo(LOGGER, "Item '{}' received update '{}'",
        itemUpdated.name,
        itemUpdated.state)
    true
]
val Functions$Function4<String, String, String, GenericItem, Boolean> postIrCommandToItem = [
    loggerName,
    irMapfile,
    irCommand,
    IrBlasterItem |
    val String LOGGER = loggerName + ".postIrCommandToItem"
    logDebug(LOGGER, "Transforming IR command '{}' using map file '{}'", irCommand, irMapfile)
    val cmd = transform("MAP", irMapfile, irCommand)
    logDebug(LOGGER, "Transformed command: {}", cmd)
    logDebug(LOGGER, "Posting command '{}' to item '{}'",irCommand, IrBlasterItem.name)
    IrBlasterItem.sendCommand(irCommand)
    true
]

// Handle echo items
rule "Computer room scene, echo item update, chromecast"
when
    Item Echo_Scene_GF_ComputerRoom_Chromecast received update ON
then
    val String LOGGER = LOGGER_NAME + ".echoSceneCc"
    logReceivedUpdateWithState.apply(LOGGER, (triggeringItem as GenericItem))
    ComputerRoom_IrBlaster_scenes_control.sendCommand(CONTROL_SCENE_CHROMECAST)
    triggeringItem.postUpdate(OnOffType::OFF)
end
rule "Computer room scene, echo item update, computer"
when
    Item Echo_Scene_GF_ComputerRoom_Computer received update ON
then
    val String LOGGER = LOGGER_NAME + ".echoSceneComputer"
    logReceivedUpdateWithState.apply(LOGGER, (triggeringItem as GenericItem))
    ComputerRoom_IrBlaster_scenes_control.sendCommand(CONTROL_SCENE_COMPUTER)
    triggeringItem.postUpdate(OnOffType::OFF)
end
rule "Computer room scene, echo item update, all off"
when
    Item Echo_Scene_GF_ComputerRoom_AllOff received update ON
then
    val String LOGGER = LOGGER_NAME + ".echoSceneAllOff"
    logReceivedUpdateWithState.apply(LOGGER, (triggeringItem as GenericItem))
    ComputerRoom_IrBlaster_scenes_control.sendCommand(CONTROL_SCENE_ALLOFF)
    triggeringItem.postUpdate(OnOffType::OFF)
end

// When the Computer room IR blaster scenes control element receives update
//  Issue associated commands
//  Reset UI element to non-pressed state
rule "Computer room IR, scenes control command"
when
    Item ComputerRoom_IrBlaster_scenes_control received update
then
    val String LOGGER = LOGGER_NAME + ".sceneCtl"
    logReceivedUpdateWithState.apply(LOGGER, (triggeringItem as GenericItem))

    val StringItem TvControlItem = ComputerRoom_IrBlaster_TV_control
    val StringItem AudioControlItem = ComputerRoom_IrBlaster_Audio_control

    val NumberItem ControlItem = (triggeringItem as NumberItem)
    val int receivedCommand = (ControlItem.state as DecimalType).intValue
    logInfo(LOGGER, "Scenes control received command code {}.", receivedCommand)
    if( receivedCommand != CONTROL_SCENE_NOCHANGE ) {

// TODO need som kind of lock for this, one at a time

        switch receivedCommand {
            case CONTROL_SCENE_ALLOFF: {
                logInfo(LOGGER, "Received all off scene command")

                // Turn off tv
                TvControlItem.sendCommand("CONTROL_TV_POWER_OFF")

                // Turn off receiver
                AudioControlItem.sendCommand("CONTROL_AUDIO_POWER_OFF")

            }
            case CONTROL_SCENE_CHROMECAST: {
                logInfo(LOGGER, "Received chromecast scene command")

                // In case recveiver is on, turn volume down
                AudioControlItem.sendCommand("CONTROL_AUDIO_VOL_ZERO")

                // Tv
                //TvControlItem.sendCommand("CONTROL_TV_POWER_ON")
                TvControlItem.sendCommand("CONTROL_TV_DIGIT_1")
                Thread::sleep(5000)
                TvControlItem.sendCommand("CONTROL_TV_VOL_MUTE")
                Thread::sleep(1000)
                TvControlItem.sendCommand("CONTROL_TV_VOL_MINUS70")
                Thread::sleep(7000)
                TvControlItem.sendCommand("CONTROL_TV_VOL_PLUS")
                Thread::sleep(500)
                TvControlItem.sendCommand("CONTROL_TV_VOL_MINUS")
                Thread::sleep(500)
                TvControlItem.sendCommand("CONTROL_TV_INPUT_HDMI3")
                Thread::sleep(5000)

                // Receiver
                AudioControlItem.sendCommand("CONTROL_AUDIO_POWER_ON")
                Thread::sleep(500)
                try {
                    g_computerRoomLockReceiverUpdates.tryLock(10,TimeUnit.SECONDS)
                } catch(Throwable t) {
                    logError(LOGGER, "Exception caught when attempting to wait for receiver power toggle. Exception was: {}", t.toString())
                }
                g_computerRoomLockReceiverUpdates.unlock()
                Thread::sleep(3500)

                AudioControlItem.sendCommand("CONTROL_AUDIO_INPUT_COAX")
                Thread::sleep(3000)
                AudioControlItem.sendCommand("CONTROL_AUDIO_VOL_ZERO")
                Thread::sleep(7000)
                AudioControlItem.sendCommand("CONTROL_AUDIO_INPUT_OPTICAL")
                Thread::sleep(5000)
                AudioControlItem.sendCommand("CONTROL_AUDIO_VOL_DEF_CC")
            }
            case CONTROL_SCENE_COMPUTER: {
                logInfo(LOGGER, "Received computer scene command")

                // In case recveiver is on, turn volume down
                AudioControlItem.sendCommand("CONTROL_AUDIO_VOL_ZERO")

                // Tv
                //TvControlItem.sendCommand("CONTROL_TV_POWER_ON")
                TvControlItem.sendCommand("CONTROL_TV_DIGIT_1")
                Thread::sleep(5000)
                TvControlItem.sendCommand("CONTROL_TV_VOL_MUTE")
                Thread::sleep(1000)
                TvControlItem.sendCommand("CONTROL_TV_VOL_MINUS70")
                Thread::sleep(7000)
                TvControlItem.sendCommand("CONTROL_TV_VOL_PLUS")
                Thread::sleep(500)
                TvControlItem.sendCommand("CONTROL_TV_VOL_MINUS")
                Thread::sleep(500)
                TvControlItem.sendCommand("CONTROL_TV_INPUT_HDMI1")
                Thread::sleep(5000)

                // Receiver
                AudioControlItem.sendCommand("CONTROL_AUDIO_POWER_ON")
                Thread::sleep(500)
                try {
                    g_computerRoomLockReceiverUpdates.tryLock(10,TimeUnit.SECONDS)
                } catch(Throwable t) {
                    logError(LOGGER, "Exception caught when attempting to wait for receiver power toggle. Exception was: {}", t.toString())
                }
                g_computerRoomLockReceiverUpdates.unlock()
                Thread::sleep(3000)

                AudioControlItem.sendCommand("CONTROL_AUDIO_INPUT_COAX")
                Thread::sleep(3000)
                AudioControlItem.sendCommand("CONTROL_AUDIO_VOL_ZERO")
                Thread::sleep(7000)
                AudioControlItem.sendCommand("CONTROL_AUDIO_INPUT_DIRECT")
                Thread::sleep(5000)
                AudioControlItem.sendCommand("CONTROL_AUDIO_VOL_DEF_COMPUTER")
            }
            default:{
                logWarn(LOGGER, "Unexpected control signal {}", receivedCommand)
            }
        }

        // To prevent the UI showing button in "pressed" state
        ControlItem.postUpdate(CONTROL_SCENE_NOCHANGE)
    }
end

// When computer room TV Ir blaster control element receives update
//  Issue associated IR command
//  Reset UI element to non-pressed state
rule "Computer room IR, TV control command"
when
    Item ComputerRoom_IrBlaster_TV_control received update
then
    val String LOGGER = LOGGER_NAME + ".tvCtl"
    logReceivedUpdateWithState.apply(LOGGER, (triggeringItem as GenericItem))

    val GenericItem IrBlasterItem = IR_GF_ComputerRoom_Broadlink_RM3Mini_command
    var HashMap<String, String> irCommandsMap = new HashMap<String, String>(g_tvCommandCodes)

    val StringItem ControlItem = (triggeringItem as StringItem)
    val String receivedCommand = ControlItem.state
    logInfo(LOGGER, "TV control received command code {}.", receivedCommand)
    if( receivedCommand != CONTROL_NOCHANGE ) {

        g_computerRoomLockTvUpdates.lock()
        try {
            val String irCommand = irCommandsMap.get(receivedCommand)
            logInfo(LOGGER, "TV command code {} corresponds to ir command named {}",receivedCommand,irCommand)
            postIrCommandToItem.apply(LOGGER, IR_MAPFILE, irCommand, IrBlasterItem)
        } catch(Throwable t) {
            logError(LOGGER, "Exception caught when handling control command. The exception was: {}", t.toString())
        } finally {
            g_computerRoomLockTvUpdates.unlock()
        }

        // To prevent the UI showing button in "pressed" state
        ControlItem.postUpdate(CONTROL_NOCHANGE)
    }
end

// When computer room Audio Ir blaster control element receives update
//  Issue associated IR command
//  Reset UI element to non-pressed state
rule "Computer room IR, Audio control command"
when
    Item ComputerRoom_IrBlaster_Audio_control received update
then
    val String LOGGER = LOGGER_NAME + ".audioCtl"
    logReceivedUpdateWithState.apply(LOGGER, (triggeringItem as GenericItem))

    val GenericItem IrBlasterItem = IR_GF_ComputerRoom_Broadlink_RM3Mini_command
    var HashMap<String, String> irCommandsMap = new HashMap<String, String>(g_audioCommandCodes)
    val SwitchItem ReceiverWallplugItem = Wallplug_GF_ComputerRoom_ReceiverPower_switch

    val StringItem ControlItem = (triggeringItem as StringItem)
    val String receivedCommand = ControlItem.state
    //logInfo(LOGGER, "Audio control received command code {}.", receivedCommand)
    if( receivedCommand != CONTROL_NOCHANGE ) {
        // Some commands are not discrete IR commands
        switch receivedCommand {
            case CONTROL_AUDIO_POWER_ON: {
                logInfo(LOGGER, "Audio control received power ON command.")
/*
                // Ensure receiver is off using physical wallplug
                triggeringItem.sendCommand(CONTROL_AUDIO_POWER_OFF)

                // Wait until off command completes, successfull lock means it did
                Thread::sleep(500) // ensures the off command has started
                try {
                    //g_computerRoomLockReceiverUpdates.lock() // indicates that off command has completed
                    g_computerRoomLockReceiverUpdates.tryLock(3,TimeUnit.SECONDS)
                } catch(Throwable t) {
                    logError(LOGGER, "Exception caught when attempting to wait for receiver power off. Exception was: {}", t.toString())
                }
                g_computerRoomLockReceiverUpdates.unlock()

                // Power on using IR
                triggeringItem.postUpdate("CONTROL_AUDIO_POWER_TOGGLE")
                Thread::sleep(500) // ensures the command has started
                try {
                    //g_computerRoomLockReceiverUpdates.lock() // indicates that off command has completed
                    g_computerRoomLockReceiverUpdates.tryLock(3,TimeUnit.SECONDS)
                } catch(Throwable t) {
                    logError(LOGGER, "Exception caught when attempting to wait for receiver power toggle. Exception was: {}", t.toString())
                }
                g_computerRoomLockReceiverUpdates.unlock()
*/
                g_computerRoomLockReceiverUpdates.lock()
                try {
                    // Wallplug: Toggle power receiver
                    ReceiverWallplugItem.sendCommand(OnOffType::OFF)
                    Thread::sleep(2500)
                    ReceiverWallplugItem.sendCommand(OnOffType::ON)
                    Thread::sleep(4500)

                    // Turn on receiver by ir
                    val String irCommand = irCommandsMap.get("CONTROL_AUDIO_POWER_TOGGLE")
                    logInfo(LOGGER, "Sending audio ir command named {}",irCommand)
                    postIrCommandToItem.apply(LOGGER, IR_MAPFILE, irCommand, IrBlasterItem)

                } catch(Throwable t) {
                    logError(LOGGER, "Exception caught when attempting enable receiver power. Exception was: {}", t.toString())
                } finally {
                    g_computerRoomLockReceiverUpdates.unlock()
                }

            }
            case CONTROL_AUDIO_POWER_OFF: {
                logInfo(LOGGER, "Audio control received power OFF command.")
                g_computerRoomLockReceiverUpdates.lock()
                try {
                    // Wallplug: Toggle power receiver
                    ReceiverWallplugItem.sendCommand(OnOffType::OFF)
                    Thread::sleep(2500)
                    ReceiverWallplugItem.sendCommand(OnOffType::ON)
                } catch(Throwable t) {
                    logError(LOGGER, "Exception caught when attempting to toggle receiver power. Exception was: {}", t.toString())
                } finally {
                    g_computerRoomLockReceiverUpdates.unlock()
                }
            }
            default: {
                logInfo(LOGGER, "Audio control received IR command {}.", receivedCommand)
                g_computerRoomLockReceiverUpdates.lock()
                try {
                    val String irCommand = irCommandsMap.get(receivedCommand)
                    logInfo(LOGGER, "Audio command code {} corresponds to ir command named {}",receivedCommand,irCommand)
                    postIrCommandToItem.apply(LOGGER, IR_MAPFILE, irCommand, IrBlasterItem)
                } catch(Throwable t) {
                    logError(LOGGER, "Exception caught when handling control command. The exception was: {}", t.toString())
                } finally {
                    g_computerRoomLockReceiverUpdates.unlock()
                }
            }
        }

        // To prevent the UI showing button in "pressed" state
        ControlItem.postUpdate(CONTROL_NOCHANGE)
    }
end

