// Imports
import org.eclipse.xtext.xbase.lib.Functions // Needed for use of lambda
import org.openhab.core.model.script.ScriptServiceUtil // Needed to convert item name to item

// Constants
val String  LOGGER_NAME = "lvngRoomLght"
val int     CONTROL_MODE_NOCHANGE = -1  // indicates "no change needed"
val int     CONTROL_MODE_DISABLE = 0    // indicates to deactivate auto off functionality
val int     CONTROL_MODE_START = 1      // indicates start/restart auto off timer

// Globals
var Timer   g_livingRoomWallLightsOffTimer = null   // For turning off living room wall lights

// Lambdas
val Functions$Function2<String, String, GenericItem> getGenericItemFromItemName = [
    loggerName,
    itemName |
    logDebug(loggerName, "Resolving item '{}' as GenericItem ...", itemName)
    val resolvedItem = ScriptServiceUtil.getItemRegistry.getItem(itemName) as GenericItem
    logDebug(loggerName, "reolved to item with state '{}'", resolvedItem.state.toString())
    resolvedItem
]
val Functions$Function2<String, GenericItem, Boolean> logStateChange = [
    loggerName,
    itemChanged |
    val String LOGGER = loggerName //+ ".stateChange"
    logDebug(LOGGER, "State of item '{}' changed to '{}'",
        itemChanged.name,
        itemChanged.state.toString())
    true
]
val Functions$Function3<String, GenericItem, String, Boolean> logReceivedCommand = [
    loggerName,
    itemCommanded,
    command |
    val String LOGGER = loggerName //+ ".cmdReceived"
    logDebug(LOGGER, "Item '{}' received command '{}'",
        itemCommanded.name,
        command)
    true
]
val Functions$Function2<String, GenericItem, Boolean> logReceivedUpdate = [
    loggerName,
    itemUpdated |
    val String LOGGER = loggerName //+ ".updReceived"
    logDebug(LOGGER, "Item '{}' received update",
        itemUpdated.name)
    true
]
val Functions$Function2<String, GenericItem, Boolean> logUnexpectedState = [
    loggerName,
    itemChanged |
    val String LOGGER = loggerName //+ ".logUnexpectedState"
    logError(LOGGER, "The state '{}' of item '{}' was unexpected!",
        itemChanged.state.toString(),
        itemChanged.name)
    true
]
val Functions$Function2<String, GenericItem, Boolean> logReceivedUpdateWithState = [
    loggerName,
    itemUpdated |
    val String LOGGER = loggerName //+ ".logReceivedUpdateWithState"
    logDebug(LOGGER, "Item '{}' received update '{}'",
        itemUpdated.name,
        itemUpdated.state)
    true
]
val Functions$Function3<String, Timer, String, Boolean> stopTimer = [
    loggerName,
    timerToStop,
    timerName |
    val String LOGGER = loggerName + ".stopTimer"
    var String dispName = "unknown"
    if( timerName !== null ) {dispName = timerName}
    if( timerToStop !== null ) {
        logDebug(LOGGER,"Stopping timer '{}', isRunning: {}", timerName, timerToStop.isRunning())
        timerToStop.cancel()
    } else {
        logDebug(LOGGER,"Not stopping timer '{}' as it was not instantiated", timerName)
    }
    true
]

/*
// This is just debug
rule "Living room lights, motion sensor, binary received update"
when
    Item Sensor_GF_LivingRoomWall_sensorBinary received update
then
    val String LOGGER = LOGGER_NAME + ".wallLightsMotionBinaryUpdated"
    val GenericItem triggeringItem = getGenericItemFromItemName.apply(LOGGER, triggeringItemName)
    logReceivedUpdate.apply(LOGGER, triggeringItem)
end
*/

/*
// This is just debug
rule "Living room lights, motion sensor, binary received command"
when
    Item Sensor_GF_LivingRoomWall_sensorBinary received command
then
    val String LOGGER = LOGGER_NAME + ".wallLightsMotionBinaryReceivedCommand"
    val GenericItem itemCommanded = Sensor_GF_LivingRoomWall_sensorBinary
    logReceivedCommand.apply(LOGGER, itemCommanded, receivedCommand.toString())
end
*/

// Motion sensor controls wall lights group
// Except when motion sensor trigger is disabled
rule "Living room lights, motion sensor changed"
when
    Item Sensor_GF_LivingRoomWall_sensorBinary changed
then
    val String LOGGER = LOGGER_NAME + ".motion"
    val GenericItem itemChanged = Sensor_GF_LivingRoomWall_sensorBinary
    val WallLightsGroup = gLightsLivingRoomWallLights
    val MotionTriggerControlItem = LivingRoom_WallLights_MotionTrigger_control
    val AutoOffTimeItem = LivingRoom_WallLights_AutoOff_setTime

    logStateChange.apply(LOGGER, itemChanged)

    logDebug(LOGGER, "Motion detected.")
    if( MotionTriggerControlItem.state == OnOffType::ON ) {
        if( itemChanged.state == OnOffType::ON ) {
            // Pass a long if on state, off state is what triggers delayed lights off
            logDebug(LOGGER, "Turning lights on.")
            WallLightsGroup.sendCommand(OnOffType::ON)
        } else if(itemChanged.state == OnOffType::OFF) {
            logDebug(LOGGER, "Setting timer for turning lights off.")
            // Kill timer if exists
/*            if( g_livingRoomWallLightsOffTimer !== null ) {
                logInfo(LOGGER,"Auto off timer exists")
            } else {
                logInfo(LOGGER,"Auto off timer does NOT exist")
            }
*/
            stopTimer.apply(LOGGER, g_livingRoomWallLightsOffTimer, "Lights auto off")
/*            if( g_livingRoomWallLightsOffTimer !== null ) {
                logInfo(LOGGER,"Auto off timer exists")
            } else {
                logInfo(LOGGER,"Not cancelling auto off timer as it was not instantiated")
            }
*/
            val int setTimeValue = (AutoOffTimeItem.state as DecimalType).intValue
            logDebug(LOGGER, "Lights will turn off in {} minutes.",setTimeValue)
            g_livingRoomWallLightsOffTimer = createTimer(now.plusMinutes(setTimeValue)) [|
                logDebug(LOGGER, "Lights auto off triggered")
                WallLightsGroup.sendCommand(OnOffType::OFF)
            ]
        } else {
            logUnexpectedState.apply(LOGGER, itemChanged)
        }
    } else if( MotionTriggerControlItem.state == OnOffType::OFF ) {
        logDebug(LOGGER, "Motion trigger is disabled, not changing lights.")
    } else {
        logUnexpectedState.apply(LOGGER, MotionTriggerControlItem)
    }
end

/*
// Just log
// When set time changes configure the zwave relay with the update value
rule "Living room wall lights, Auto off time changed"
when
    Item LivingRoom_WallLights_AutoOff_setTime received update
then
    val String LOGGER = LOGGER_NAME + ".autoOff"
    //val MotionTriggerItem = LivingRoom_WallLights_MotionTrigger_control
    val int controlValue = (LivingRoom_WallLights_AutoOff_setTime.state as DecimalType).intValue

    if( controlValue < 1 ) {
        logInfo(LOGGER, "New auto off time is {} minutes, auto off will be disabled.", controlValue)
    } else {
        logInfo(LOGGER, "Recording new auto off time {} minutes.", controlValue)
    }
end
*/

/*
// Just log
// Allow to enable/disable motion triggering
rule "Living room wall lights, Motion trigger control change"
when
    Item LivingRoom_WallLights_MotionTrigger_control changed
then
    val String LOGGER = LOGGER_NAME + ".wallLightsAutoOffEnabledChange"
    val GenericItem itemChanged = LivingRoom_WallLights_MotionTrigger_control
    logStateChange.apply(LOGGER, itemChanged)
end
*/

// Motion triggering should be automatically disabled at night
// TODO replace this logic with what is used in oldest_kid_room.rules
rule "Living room wall lights, Automatic enable/disable motion trigger"
when
    Time cron "0 0 23 1/1 * ? *" or
    Time cron "0 0 05 1/1 * ? *"
then
    val String LOGGER = LOGGER_NAME + ".motionOffAtnight"
    val MotionTriggerItem = LivingRoom_WallLights_MotionTrigger_control

    logDebug(LOGGER, "Motion enable/disable cron running, hour is {}.", now.getHour)

// TODO this is a bug, without hour being defined nothing happens.
// proper fix is to have UI motion disable override the setting modified by this job
//    var Number hour = now.getHour

//    logInfo(LOGGER, "hour: '{}'",hour)

//    var msg = "Rule was triggered, hour=" + hour.toString()
    if( hour == 23 ) {
        MotionTriggerItem.sendCommand(OnOffType::OFF)
        logDebug(LOGGER, "Motion trigger disabled.")
//        msg = msg + ", setting motion trigger to 'OFF'"
    } else if( hour == 05 ) {
        MotionTriggerItem.sendCommand(OnOffType::ON)
        logDebug(LOGGER, "Motion trigger enabled.")
//        msg = msg + ", setting motion trigger to 'ON'"
    } else {
        logError(LOGGER, "The hour '{}' was unexpected!",hour)

        // Default to ON
        MotionTriggerItem.sendCommand(OnOffType::ON)
        logInfo(LOGGER, "Motion trigger disabled.")
//        msg = msg + ", setting motion trigger to 'DEFAULT'"
    }
end

// When the UI control element change state
rule "Living room wall lights, Auto off control item state change"
when
    Item LivingRoom_WallLights_AutoOff_control received update
then
    val String LOGGER = LOGGER_NAME + ".wallLightsAutoOffCtl"
    val GenericItem triggeringItem = getGenericItemFromItemName.apply(LOGGER, triggeringItemName)
    logReceivedUpdateWithState.apply(LOGGER, triggeringItem)

    val NumberItem AutoOffControlItem = LivingRoom_WallLights_AutoOff_control
    val NumberItem AutoOffSetTimeItem = LivingRoom_WallLights_AutoOff_setTime

    val int controlValue = (AutoOffControlItem.state as DecimalType).intValue

    logDebug(LOGGER, "Auto off control received command {}.", controlValue)

    if( controlValue != CONTROL_MODE_NOCHANGE ) {
        // Failsafe default to timer off in case of problems
        if( AutoOffSetTimeItem.state == NULL || AutoOffSetTimeItem.state == UNDEF ) {
            logWarn(LOGGER, "Item '{}' has state NULL or UNDEF!", AutoOffSetTimeItem.name)
            AutoOffSetTimeItem.postUpdate(0)
        }

        // Determine new set time
        // Failsafe default to timer off in case of problems
        var int setTimeValue = 0
        if( AutoOffSetTimeItem.state != NULL && AutoOffSetTimeItem.state != UNDEF ) {
            setTimeValue = (AutoOffSetTimeItem.state as DecimalType).intValue
        } else {
            logWarn(LOGGER, "Item '{}' has state NULL or UNDEF, default set time {} will be used!", AutoOffSetTimeItem.name, setTimeValue)
        }
        logDebug(LOGGER, "Current set time value is {}", setTimeValue)

        var int newSetTime = Math.max(0, setTimeValue + controlValue) // never negative
        if( controlValue == CONTROL_MODE_START ) {
            newSetTime = setTimeValue   // no change, just start/restart auto off timer
        } else if( controlValue == CONTROL_MODE_DISABLE) {
            newSetTime = 0              // 0 will result in termination of auto off timer
        }
        logDebug(LOGGER, "New set time value is {}", newSetTime)

        // Apply new set time
        AutoOffSetTimeItem.postUpdate(newSetTime)

        // To prevent the UI showing button in "pressed" state
        AutoOffControlItem.postUpdate(CONTROL_MODE_NOCHANGE)
    }
end
