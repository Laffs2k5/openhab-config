// Imports
import org.eclipse.xtext.xbase.lib.Functions // Needed for use of lambda

// Constants
val String  LOGGER_NAME = "cmpterRoom"
//val int     CONTROL_MODE_NOCHANGE = -1  // indicates "no ccmptere ne"
//val int     CONTROL_MODE_DISABLE = 0    // indicates to deactivate auto off cmptertiony
//val int     CONTROL_MODE_START = 1      // indicates start/restart auto off timer

// Globals


// Lambdas
val Functions$Function2<String, GenericItem, Boolean> logStateChange = [
    loggerName,
    itemChanged |
    val String LOGGER = loggerName //+ ".stateChange"
    logInfo(LOGGER, "State of item '{}' changed to '{}'",
        itemChanged.name,
        itemChanged.state.toString())
    true
]


rule "TV backlight controlled by tv online state"
when
    Item Network_GF_ComputerRoom_TV changed from OFF to ON or
    Item Network_GF_ComputerRoom_TV changed from ON to OFF
then
    val String LOGGER = LOGGER_NAME + ".tvState"
    val GenericItem itemChanged = Network_GF_ComputerRoom_TV
    val LightBrightnessItem = LedStrip_GF_ComputerRoom_brightness

    var int percent = 0
    var int percent_maxVal = 100
    var int percent_steps = 2
    var int delay_pr_step_millis = 200
    var Timer fade_Timer = null

    logStateChange.apply(LOGGER, itemChanged)

    if (itemChanged.state==OFF) {

        //  Dim down gently when TV goes offline
        //logInfo("TvBacklight","Dimmming down")
        if (LightBrightnessItem.state instanceof DecimalType) {
            percent = ((LightBrightnessItem.state as DecimalType) / percent_steps).intValue * percent_steps //round
            fade_Timer = createTimer(now.plusMillis(delay_pr_step_millis)) [|
                LightBrightnessItem.sendCommand(percent)
                if (percent > 0) {
                    percent = percent - percent_steps
                    //logInfo("TvBacklight","Dimmming, decrease {} to {}", percent_steps, percent)
                    fade_Timer.reschedule(now.plusMillis(delay_pr_step_millis))
                } else {
                    //logInfo("TvBacklight","Done dimmming, final brightness is {}", percent)
                }
            ]
        }

    } else if (itemChanged.state==ON) {

        // Dim up gently when TV goes online
        //logInfo("TvBacklight","Dimmming up")
        if (LightBrightnessItem.state instanceof DecimalType) {
            percent = ((LightBrightnessItem.state as DecimalType) / percent_steps).intValue * percent_steps //round
            fade_Timer = createTimer(now.plusMillis(delay_pr_step_millis)) [|
                LightBrightnessItem.sendCommand(percent)
                if (percent < percent_maxVal) {
                    percent = percent + percent_steps
                    //logInfo("TvBacklight","Dimmming, increase {} to {}", percent_steps, percent)
                    fade_Timer.reschedule(now.plusMillis(delay_pr_step_millis))
                } else {
                    //logInfo("TvBacklight","Done dimmming, final brightness is {}", percent)
                }
            ]
        }

    }
end
