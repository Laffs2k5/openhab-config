// Imports
import org.eclipse.xtext.xbase.lib.Functions // Needed for use of lambda
import org.openhab.core.model.script.ScriptServiceUtil // Needed to convert item name to item

// Constants
val String  LOGGER_NAME = "lndryRmLght"
val int     CONTROL_MODE_NOCHANGE = -1  // indicates "no change needed"
val int     CONTROL_MODE_DISABLE = 0    // indicates to deactivate auto off functionality
val int     CONTROL_MODE_START = 1      // indicates start/restart auto off timer

// Globals
var Timer   g_LaundryRoomLightsOffTimer = null   // For turning off Laundry room lights

// Lambdas
val Functions$Function2<String, String, GenericItem> getGenericItemFromItemName = [
    loggerName,
    itemName |
    logDebug(loggerName, "Resolving item '{}' as GenericItem ...", itemName)
    val resolvedItem = ScriptServiceUtil.getItemRegistry.getItem(itemName) as GenericItem
    logDebug(loggerName, "resolved to item with state '{}'", resolvedItem.state.toString())
    resolvedItem
]
val Functions$Function2<String, GenericItem, Boolean> logStateChange = [
    loggerName,
    itemChanged |
    val String LOGGER = loggerName //+ ".stateChange"
    logDebug(LOGGER, "State of item '{}' changed to '{}'",
        itemChanged.name,
        itemChanged.state.toString())
    true
]
val Functions$Function3<String, GenericItem, String, Boolean> logReceivedCommand = [
    loggerName,
    itemCommanded,
    command |
    val String LOGGER = loggerName //+ ".cmdReceived"
    logDebug(LOGGER, "Item '{}' received command '{}'",
        itemCommanded.name,
        command)
    true
]
val Functions$Function2<String, GenericItem, Boolean> logReceivedUpdate = [
    loggerName,
    itemUpdated |
    val String LOGGER = loggerName //+ ".updReceived"
    logDebug(LOGGER, "Item '{}' received update",
        itemUpdated.name)
    true
]
val Functions$Function2<String, GenericItem, Boolean> logUnexpectedState = [
    loggerName,
    itemChanged |
    val String LOGGER = loggerName //+ ".logUnexpectedState"
    logError(LOGGER, "The state '{}' of item '{}' was unexpected!",
        itemChanged.state.toString(),
        itemChanged.name)
    true
]
val Functions$Function2<String, GenericItem, Boolean> logReceivedUpdateWithState = [
    loggerName,
    itemUpdated |
    val String LOGGER = loggerName //+ ".logReceivedUpdateWithState"
    logDebug(LOGGER, "Item '{}' received update '{}'",
        itemUpdated.name,
        itemUpdated.state)
    true
]
val Functions$Function3<String, Timer, String, Boolean> stopTimer = [
    loggerName,
    timerToStop,
    timerName |
    val String LOGGER = loggerName + ".stopTimer"
    var String dispName = "unknown"
    if( timerName !== null ) {dispName = timerName}
    if( timerToStop !== null ) {
        logDebug(LOGGER,"Stopping timer '{}', isRunning: {}", timerName, timerToStop.isRunning())
        timerToStop.cancel()
    } else {
        logDebug(LOGGER,"Not stopping timer '{}' as it was not instantiated", timerName)
    }
    true
]

// This is just debug
rule "Laundry room lights, motion sensor, binary received update"
when
    Item Sensor_CL_LaundryRoom_SensorBinary received update
then
    val String LOGGER = LOGGER_NAME + ".mtnSensUpd"
    val GenericItem triggeringItem = getGenericItemFromItemName.apply(LOGGER, triggeringItemName)
    logReceivedUpdate.apply(LOGGER, triggeringItem)
end

// This is just debug
rule "Laundry room lights, motion sensor, binary received command"
when
    Item Sensor_CL_LaundryRoom_SensorBinary received command
then
    val String LOGGER = LOGGER_NAME + ".mtnSensCmd"
    val GenericItem itemCommanded = Sensor_CL_LaundryRoom_SensorBinary
    logReceivedCommand.apply(LOGGER, itemCommanded, receivedCommand.toString())
end

// Motion sensor controls lights
// Except when motion sensor trigger is disabled
rule "Laundry room lights, motion received update"
when
    Item Sensor_CL_LaundryRoom_SensorBinary received update
then
    val String LOGGER = LOGGER_NAME + ".mtn"
    val GenericItem itemChanged = Sensor_CL_LaundryRoom_SensorBinary
    val LightSwitch = Relay_CL_LaundryRoom_MainLights_switch
    val SwitchItem MotionTriggerControlItem = LaundryRoom_Lights_MotionTrigger_control
    val NumberItem MotionTriggerStartitem = LaundryRoom_Lights_MotionTrigger_startHour
    val NumberItem MotionTriggerEnditem = LaundryRoom_Lights_MotionTrigger_endHour
    val AutoOffTimeItem = LaundryRoom_Lights_AutoOff_setTime

    logReceivedUpdateWithState.apply(LOGGER, itemChanged)

    if( MotionTriggerControlItem.state == OnOffType::ON ) {
        // Failsafe: newly defined items will hav unknown state until updated
        if(MotionTriggerStartitem.state == NULL || MotionTriggerStartitem.state == UNDEF ) {
            logError(LOGGER, "Will not change state of lights as start hour for motion trigger is not set!")
        } else if(MotionTriggerEnditem.state == NULL || MotionTriggerEnditem.state == UNDEF ) {
            logError(LOGGER, "Will not change state of lights as start hour for motion trigger is not set!")
        } else {
            // Motion trigger timespan is defined, determine config
            val int startHourValue = (MotionTriggerStartitem.state as DecimalType).intValue
            logDebug(LOGGER, "Motion trigger start hour value is '{}' configured by item '{}'", startHourValue, MotionTriggerStartitem.name)
            val int endHourValue = (MotionTriggerEnditem.state as DecimalType).intValue
            logDebug(LOGGER, "Motion trigger start hour value is '{}' configured by item '{}'", endHourValue, MotionTriggerEnditem.name)
            val startTime = now.with(LocalTime.MIN).plusHours(startHourValue)
            var endtime = now.with(LocalTime.MIN).plusHours(endHourValue)
            if( startHourValue > endHourValue ) {
                // Timespan overlaps midnight, add 1 day to end time
                endtime = now.with(LocalTime.MIN).plusHours(endHourValue).plusDays(1)
            }
            logDebug(LOGGER, "Motion trigger start time value is '{}'", startTime)
            logDebug(LOGGER, "Motion trigger end time value is '{}'", endtime)

            // Check if current time is within given timespan
            if( !( now.isAfter(startTime) && now.isBefore(endtime) ) ) {
                logDebug(LOGGER, "Will not change state of lights as current date '{}' is not between '{}' and '{}'.", now, startTime, endtime)
            } else {
                // Log
                if( startHourValue == endHourValue ) {
                    logDebug(LOGGER, "Motion will affect lights as current configuration is ON always.")
                } else {
                    logDebug(LOGGER, "Motion will affect lights as current date '{}' is between '{}' and '{}'.", now, startTime, endtime)
                }

                /* // just debug
                if( g_LaundryRoomLightsOffTimer !== null ) {
                    logDebug(LOGGER,"Auto off timer exists")
                } else {
                    logDebug(LOGGER,"Auto off timer does NOT exist")
                } */

                // Kill auto off timer if exists
                // Do not care if motion is detected or no longer detected,
                // a new auto off timer will be created as needed below
                stopTimer.apply(LOGGER, g_LaundryRoomLightsOffTimer, "Lights auto off")

                /* // just debug
                if( g_LaundryRoomLightsOffTimer !== null ) {
                    logDebug(LOGGER,"Auto off timer exists")
                } else {
                    logDebug(LOGGER,"Not cancelling auto off timer as it was not instantiated")
                } */

                if( itemChanged.state == OnOffType::ON ) {
                    // Motion detected and hour of day is within timespan of motion trigger enabled --> Turn lights on
                    logDebug(LOGGER, "Turning lights on.")
                    LightSwitch.sendCommand(OnOffType::ON)
                } else if(itemChanged.state == OnOffType::OFF) {
                    // Motion no longer detected and hour of day is within timespan of motion trigger enabled
                    //  --> If a timeout for auto off is configured, turn lights off after defined time
                    val int setTimeValue = (AutoOffTimeItem.state as DecimalType).intValue
                    if( setTimeValue > 0 ) {
                        // Start new auto off timer
                        logDebug(LOGGER, "Setting timer for turning lights off, lights will turn off in {} minutes.", setTimeValue)
                        // DEBUG g_LaundryRoomLightsOffTimer = createTimer(now.plusSeconds(setTimeValue)) [|
                        g_LaundryRoomLightsOffTimer = createTimer(now.plusMinutes(setTimeValue)) [|
                            logDebug(LOGGER, "Lights auto off triggered")
                            LightSwitch.sendCommand(OnOffType::OFF)
                        ]
                    } else {
                        logDebug(LOGGER, "Lights will not turn off automatically as timeout for auto off is {} minutes.", setTimeValue)
                    }
                } else {
                    logUnexpectedState.apply(LOGGER, itemChanged)
                }
            } // end hour of day is within timespan of motion trigger enabled
        } // end start and end hour is defined

    } else if( MotionTriggerControlItem.state == OnOffType::OFF ) {
        logDebug(LOGGER, "Motion trigger is disabled, not changing lights.")
    } else {
        logUnexpectedState.apply(LOGGER, MotionTriggerControlItem)
    }
end

// When time for auto off changes:
//  If auto off is disabled stop the auto off timer
//  If motion sensor is untriggered, re-trigger it to have the motion rule apply a new auto off timer
//  Update UI status text for auto off
rule "Laundry room lights, Auto off time updated"
when
    Item LaundryRoom_Lights_AutoOff_setTime received update
then
    val String LOGGER = LOGGER_NAME + ".aOffTmeUpd"
    val GenericItem itemChanged = LaundryRoom_Lights_AutoOff_setTime
    val MotionTriggerSensorItem = Sensor_CL_LaundryRoom_SensorBinary
    val StringItem AutoOffStatusItem = LaundryRoom_Lights_AutoOff_setTime_config
    val int controlValue = (itemChanged.state as DecimalType).intValue
    var String statusText

    logReceivedUpdateWithState.apply(LOGGER, itemChanged)

    if( controlValue < 1 ) {
        logDebug(LOGGER, "Auto off time is {} minutes, cancelling auto off timer if it exists.", controlValue)
        stopTimer.apply(LOGGER, g_LaundryRoomLightsOffTimer, "Lights auto off")
        statusText = "OFF"
    } else {
        logDebug(LOGGER, "Auto off time is {} minutes.", controlValue)
        // If montion sensor is untriggered it must be re-triggered to activate auto off timer
        // if montion sensor is triggered it will post OFF state itself after configured intervall
        if( MotionTriggerSensorItem.state == OnOffType::OFF ) {
            logDebug(LOGGER, "Will re-trigger motion sensor to (re-)activate auto off timer.", controlValue)
            MotionTriggerSensorItem.postUpdate(OnOffType::OFF)
        }
        statusText = String.format("%d min", controlValue)
    }

    logDebug(LOGGER, "Auto off UI text is: {}", statusText)
    AutoOffStatusItem.postUpdate(statusText)
end

// When auto off is enabled/disabled:
//  If auto off is disabled stop the auto off timer
//  If auto off is enabled and motion sensor is untriggered, re-trigger it to have the motion rule apply a new auto off timer
//  Update UI status text for motion trigger
rule "Laundry room lights, Motion trigger control received update"
when
    Item LaundryRoom_Lights_MotionTrigger_control received update
then
    val String LOGGER = LOGGER_NAME + ".aOffCtlChg"
    val GenericItem itemChanged = LaundryRoom_Lights_MotionTrigger_control
    val SwitchItem MotionTriggerSensorItem = Sensor_CL_LaundryRoom_SensorBinary
    val NumberItem MotionTriggerStartitem = LaundryRoom_Lights_MotionTrigger_startHour
    val NumberItem MotionTriggerEnditem = LaundryRoom_Lights_MotionTrigger_endHour
    val StringItem MotionTriggerStatusItem = LaundryRoom_Lights_MotionTrigger_config

    logReceivedUpdateWithState.apply(LOGGER, itemChanged)

    if( itemChanged.state == OnOffType::OFF ) {
        logDebug(LOGGER, "Cancelling auto off timer if it exists.")
        stopTimer.apply(LOGGER, g_LaundryRoomLightsOffTimer, "Lights auto off")
    } else {
        // If montion sensor is untriggered it must be re-triggered to activate auto off timer
        // if montion sensor is triggered it will post OFF state itself after configured intervall
        if( MotionTriggerSensorItem.state == OnOffType::OFF ) {
            logDebug(LOGGER, "Will re-trigger motion sensor to activate auto off timer.")
            MotionTriggerSensorItem.postUpdate(OnOffType::OFF)
        }
    }

    // Determine UI status text
    val int startHourValue = (MotionTriggerStartitem.state as DecimalType).intValue
    logDebug(LOGGER, "Motion trigger start hour value is '{}' configured by item '{}'", startHourValue, MotionTriggerStartitem.name)
    val int endHourValue = (MotionTriggerEnditem.state as DecimalType).intValue
    logDebug(LOGGER, "Motion trigger start hour value is '{}' configured by item '{}'", endHourValue, MotionTriggerEnditem.name)
    var String statusText = String.format("%s", itemChanged.state.toString())
    if( itemChanged.state == OnOffType::ON ) {
        if( startHourValue == endHourValue ) {
            statusText += " always"
        } else {
            statusText += String.format(" from %02d to %02d", startHourValue, endHourValue)
        }
    }

    // Update UI status text
    logDebug(LOGGER, "Motion control UI text is: {}", statusText)
    MotionTriggerStatusItem.postUpdate(statusText)

end

// When the start or end time changes
//  Trigger motion trigger control rule to have it handle logic with updated value
rule "Laundry room lights, Auto off start/end time state change"
when
    Item LaundryRoom_Lights_MotionTrigger_startHour changed
    or
    Item LaundryRoom_Lights_MotionTrigger_endHour changed
then
    val String LOGGER = LOGGER_NAME + ".aOfftimeChg"
    val SwitchItem MotionTriggerControlItem = LaundryRoom_Lights_MotionTrigger_control
    val GenericItem triggeringItem = getGenericItemFromItemName.apply(LOGGER, triggeringItemName)
    logStateChange.apply(LOGGER, triggeringItem)

    // Motion trigger control will re-trigger motion item as needed and update UI status text
    // Post update to control with current state to trigger it's logic
    MotionTriggerControlItem.postUpdate(MotionTriggerControlItem.state)
end
/*
// When the start time changes
rule "Laundry room lights, Auto off start time state change"
when
    Item LaundryRoom_Lights_MotionTrigger_startHour changed
then
    val String LOGGER = LOGGER_NAME + ".aOffStartChg"
    val GenericItem itemChanged = LaundryRoom_Lights_MotionTrigger_startHour
    val SwitchItem MotionTriggerControlItem = LaundryRoom_Lights_MotionTrigger_control
    logStateChange.apply(LOGGER, itemChanged)

    // All values are accepted and motion rule will handle it:
    //  09-10 is ok
    //  10-09 is ok
    //  09-09 means allways
    // Auto off control handles status text, it will also re-trigger motion item if its off
    MotionTriggerControlItem.postUpdate(MotionTriggerControlItem.state)
end

// When the end time changes
rule "Laundry room lights, Auto off end time state change"
when
    Item LaundryRoom_Lights_MotionTrigger_endHour changed
then
    val String LOGGER = LOGGER_NAME + ".aOffEndChg"
    val GenericItem itemChanged = LaundryRoom_Lights_MotionTrigger_endHour
    val SwitchItem MotionTriggerControlItem = LaundryRoom_Lights_MotionTrigger_control
    logStateChange.apply(LOGGER, itemChanged)

    // All values are accepted and motion rule will handle it:
    //  09-10 is ok
    //  10-09 is ok
    //  09-09 means allways
    // Auto off control handles status text, it will also re-trigger motion item if its off
    MotionTriggerControlItem.postUpdate(MotionTriggerControlItem.state)
end
*/
// When the UI control element change state
rule "Laundry room lights, Auto off control item state change"
when
    Item LaundryRoom_Lights_AutoOff_control received update
then
    val String LOGGER = LOGGER_NAME + ".aOffTm"
    val GenericItem triggeringItem = getGenericItemFromItemName.apply(LOGGER, triggeringItemName)
    logReceivedUpdateWithState.apply(LOGGER, triggeringItem)

    val NumberItem AutoOffControlItem = LaundryRoom_Lights_AutoOff_control
    val NumberItem AutoOffSetTimeItem = LaundryRoom_Lights_AutoOff_setTime

    val int controlValue = (AutoOffControlItem.state as DecimalType).intValue

    logDebug(LOGGER, "Auto off control received command {}.", controlValue)

    if( controlValue != CONTROL_MODE_NOCHANGE ) {
        // Failsafe default to timer off in case of problems
        if( AutoOffSetTimeItem.state == NULL || AutoOffSetTimeItem.state == UNDEF ) {
            logWarn(LOGGER, "Item '{}' has state NULL or UNDEF!", AutoOffSetTimeItem.name)
            AutoOffSetTimeItem.postUpdate(0)
        }

        // Determine new set time
        // Failsafe default to timer off in case of problems
        var int setTimeValue = 0
        if( AutoOffSetTimeItem.state != NULL && AutoOffSetTimeItem.state != UNDEF ) {
            setTimeValue = (AutoOffSetTimeItem.state as DecimalType).intValue
        } else {
            logWarn(LOGGER, "Item '{}' has state NULL or UNDEF, default set time {} will be used!", AutoOffSetTimeItem.name, setTimeValue)
        }
        logDebug(LOGGER, "Current set time value is {}", setTimeValue)

        var int newSetTime = Math.max(0, setTimeValue + controlValue) // never negative
        if( controlValue == CONTROL_MODE_START ) {
            newSetTime = setTimeValue   // no change, just start/restart auto off timer
        } else if( controlValue == CONTROL_MODE_DISABLE) {
            newSetTime = 0              // 0 will result in termination of auto off timer
        }
        logDebug(LOGGER, "New set time value is {}", newSetTime)

        // Apply new set time
        AutoOffSetTimeItem.postUpdate(newSetTime)

        // To prevent the UI showing button in "pressed" state
        AutoOffControlItem.postUpdate(CONTROL_MODE_NOCHANGE)
    }
end
