// Imports
import org.eclipse.xtext.xbase.lib.Functions // Needed for use of lambda
import org.openhab.core.model.script.ScriptServiceUtil // Needed to convert item name to item
import java.time.format.DateTimeFormatter

// Constants
val String  LOGGER_NAME = "laundry_room"
val int     CONTROL_MODE_NOCHANGE = -1  // indicates "no change needed"
val int     CONTROL_MODE_DISABLE = 0    // indicates to deactivate auto off functionality
val int     CONTROL_MODE_START = 1      // indicates start/restart auto off timer

// Globals


// Lambdas
val Functions$Function2<String, String, GenericItem> getGenericItemFromItemName = [
    loggerName,
    itemName |
    logDebug(loggerName, "Resolving item '{}' as GenericItem ...", itemName)
    val resolvedItem = ScriptServiceUtil.getItemRegistry.getItem(itemName) as GenericItem
    logDebug(loggerName, "reolved to item with state '{}'", resolvedItem.state.toString())
    resolvedItem
]
val Functions$Function2<String, GenericItem, Boolean> logStateChange = [
    loggerName,
    itemChanged |
    val String LOGGER = loggerName //+ ".logStateChange"
    logDebug(LOGGER, "State of item '{}' changed to '{}'",
        itemChanged.name,
        itemChanged.state.toString())
    true
]
val Functions$Function2<String, GenericItem, Boolean> logReceivedUpdate = [
    loggerName,
    itemUpdated |
    val String LOGGER = loggerName //+ ".logReceivedUpdate"
    logDebug(LOGGER, "Item '{}' received update",
        itemUpdated.name)
    true
]
val Functions$Function2<String, GenericItem, Boolean> logReceivedUpdateWithState = [
    loggerName,
    itemUpdated |
    val String LOGGER = loggerName //+ ".logReceivedUpdateWithState"
    logDebug(LOGGER, "Item '{}' received update '{}'",
        itemUpdated.name,
        itemUpdated.state)
    true
]
val Functions$Function3<String, String, String, String> getAndLogMachineNotifyMsg = [
    loggerName,
    machineName,
    machineState |
    val triggeredJavaTime = now
    val DateTimeFormatter fmtAsHour = DateTimeFormatter.ofPattern("HH:mm")
    val DateTimeFormatter fmtAsDate = DateTimeFormatter.ofPattern("dd MMMM yyyy")
    val String notifyMsg = "The " + machineName + " entered the " + machineState + " state at "
        + triggeredJavaTime.toLocalDateTime().format(fmtAsHour) + " on " + triggeredJavaTime.toLocalDateTime().format(fmtAsDate) + "."
    logInfo(loggerName, "{}", notifyMsg)
    notifyMsg
]
val Functions$Function4<String, String, String, String, Boolean> notifyMachineToTelegram = [
    loggerName,
    machineName,
    machineState,
    notifyMsg |
    logInfo(loggerName, "Sending notification: {}", notifyMsg)
    val telegramAction = getActions("telegram","telegram:telegramBot:99ccb3e807") // peder bot
    telegramAction.sendTelegram("Openhab: " + machineName + " " + machineState + ": " + notifyMsg)
    true
]
val Functions$Function3<String, String, String, Boolean> notifyMachineToSpeaker = [
    loggerName,
    machineName,
    machineState |

    val int notifyVolume = 20 // percent
    val String notifyMp3 = "mario-1-up.mp3"
    val String notifySink = "chromecast:chromecast:7ea2b22cb8d648aa8a693283bcea5489" // Computer room speaker
    //val String notifyVoice = "picotts:enUS"
    //val String notifyMessage = "The " + machineName + " just entered the " + machineState + " state."

    playSound(notifySink, notifyMp3, new PercentType(notifyVolume))
    //Thread::sleep(2000)
    //logInfo(loggerName, "Reading notification: {}", notifyMessage)
    //say(notifyMessage, notifyVoice, notifySink, new PercentType(notifyVolume))

    true
]

// When tumbple dryer power sensor receives update
// Perform check if machine is now running/stopped
rule "Laundry room, tumble dryer power updated"
when
    Item Wallplug_CL_LaudryRoom_TumbleDryer_SensorPower received update
    or
    Item Wallplug_CL_LaundryRoom_WashingMachine_SensorPower received update
then
    val String LOGGER = LOGGER_NAME + ".machinePwrUpd"
    val GenericItem triggeringItem = getGenericItemFromItemName.apply(LOGGER, triggeringItemName)
    logReceivedUpdateWithState.apply(LOGGER, triggeringItem)

    var SwitchItem MachineStateItem
    if( triggeringItem.name.toString.contains('Washing') ) {
        MachineStateItem = LaudryRoom_WashingMachine_RunningState
    } else if( triggeringItem.name.toString.contains('Tumble') ) {
        MachineStateItem = LaudryRoom_TumbleDryer_RunningState
    } else {
        logError(LOGGER, "The item '{}' cannot be handled by this rule!", triggeringItem.name)
    }

    logDebug(LOGGER, "Machine state item to update: {}",MachineStateItem.name)

    val int MACHINE_STATE_LOOKBACKWARDS_MINUTES = 5       // Time look backwards when determinning if machine is running
    val int MACHINE_RUNNING_WHEN_POWER_IS_MORE_THAN = 25  // Watts, below this for configured minutes means machine is stopped
    val int MACHINE_STOPPED_WHEN_POWER_IS_LESS_THAN = 10  // Watts, above this for configured minutes means machine is running

    //val int maxValue = (triggeringItem.maximumSince(now.minusMinutes(MACHINE_STATE_LOOKBACKWARDS_MINUTES),"influxdb").state as DecimalType).intValue
    //val int minValue = (triggeringItem.minimumSince(now.minusMinutes(MACHINE_STATE_LOOKBACKWARDS_MINUTES),"influxdb").state as DecimalType).intValue
    val int avgValue = triggeringItem.averageSince(now.minusMinutes(MACHINE_STATE_LOOKBACKWARDS_MINUTES),"influxdb").intValue
    //logDebug(LOGGER, "maxVal={},minVal={},avgValue={}",maxValue,minValue,avgValue)

    if( avgValue > MACHINE_RUNNING_WHEN_POWER_IS_MORE_THAN ) {
        logDebug(LOGGER, "Posting running state to {}", MachineStateItem.name)
        MachineStateItem.postUpdate(OnOffType::ON)
    } else if( avgValue < MACHINE_STOPPED_WHEN_POWER_IS_LESS_THAN ) {
        logDebug(LOGGER, "Posting stopped state to {}", MachineStateItem.name)
        MachineStateItem.postUpdate(OnOffType::OFF)
    }
end

// When machine changes state
// Notify by telegram
// Notify on computer room speaker
rule "Laundry room, washing machine running state changed"
when
    Item LaudryRoom_WashingMachine_RunningState changed
then
    val String LOGGER = LOGGER_NAME + ".washStateChg"
    val String machineName = "washing machine"
    val GenericItem itemChanged = LaudryRoom_WashingMachine_RunningState

    logStateChange.apply(LOGGER, itemChanged)

    val String machineState = transform("MAP", "houshold_items.map", itemChanged.state.toString)
    val String notifyMsg = getAndLogMachineNotifyMsg.apply(LOGGER, machineName, machineState)

    if( itemChanged.state == OnOffType::OFF) {
        notifyMachineToTelegram.apply(LOGGER, machineName, machineState, notifyMsg)
        notifyMachineToSpeaker.apply(LOGGER, machineName, machineState)
    } else {
        logInfo(LOGGER, "No notification will be sent.")
    }
end

// When machine changes state
// Notify by telegram
// Notify on computer room speaker
rule "Laundry room, tumble dryer running state changed"
when
    Item LaudryRoom_TumbleDryer_RunningState changed
then
    val String LOGGER = LOGGER_NAME + ".tmblrStateChg"
    val String machineName = "tumble dryer"
    val GenericItem itemChanged = LaudryRoom_TumbleDryer_RunningState

    logStateChange.apply(LOGGER, itemChanged)

    val String machineState = transform("MAP", "houshold_items.map", itemChanged.state.toString)
    val String notifyMsg = getAndLogMachineNotifyMsg.apply(LOGGER, machineName, machineState)

    if( itemChanged.state == OnOffType::OFF) {
        notifyMachineToTelegram.apply(LOGGER, machineName, machineState, notifyMsg)
        notifyMachineToSpeaker.apply(LOGGER, machineName, machineState)
    } else {
        logInfo(LOGGER, "No notification will be sent.")
    }
end
