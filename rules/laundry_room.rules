// Imports
import org.eclipse.xtext.xbase.lib.Functions // Needed for use of lambda

// Constants
val String  LOGGER_NAME = "laundry_room"
val int     CONTROL_MODE_NOCHANGE = -1  // indicates "no change needed"
val int     CONTROL_MODE_DISABLE = 0    // indicates to deactivate auto off functionality
val int     CONTROL_MODE_START = 1      // indicates start/restart auto off timer

// Globals


// Lambdas
val Functions$Function2<String, GenericItem, Boolean> logStateChange = [
    loggerName,
    itemChanged |
    val String LOGGER = loggerName //+ ".logStateChange"
    logInfo(LOGGER, "State of item '{}' changed to '{}'",
        itemChanged.name,
        itemChanged.state.toString())
    true
]
val Functions$Function2<String, GenericItem, Boolean> logReceivedUpdate = [
    loggerName,
    itemUpdated |
    val String LOGGER = loggerName //+ ".logReceivedUpdate"
    logDebug(LOGGER, "Item '{}' received update",
        itemUpdated.name)
    true
]
val Functions$Function2<String, GenericItem, Boolean> logReceivedUpdateWithState = [
    loggerName,
    itemUpdated |
    val String LOGGER = loggerName //+ ".logReceivedUpdateWithState"
    logDebug(LOGGER, "Item '{}' received update '{}'",
        itemUpdated.name,
        itemUpdated.state)
    true
]
val Functions$Function3<String, GenericItem, String, Boolean> logReceivedCommand = [
    loggerName,
    itemCommanded,
    command |
    val String LOGGER = loggerName //+ ".logReceivedCommand"
    logDebug(LOGGER, "Item '{}' received command '{}'",
        itemCommanded.name,
        command)
    true
]
val Functions$Function2<String, GenericItem, Boolean> logUnexpectedState = [
    loggerName,
    itemChanged |
    val String LOGGER = loggerName //+ ".logUnexpectedState"
    logError(LOGGER, "The state '{}' of item '{}' was unexpected!",
        itemChanged.state.toString(),
        itemChanged.name)
    true
]

// When tumbple dryer power sensor receives update
// Perform check if machine is now running/stopped
rule "Laundry room, tumble dryer power updated"
when
    Item Wallplug_CL_LaudryRoom_TumbleDryer_SensorPower received update
    or
    Item Wallplug_CL_LaundryRoom_WashingMachine_SensorPower received update
then
    val String LOGGER = LOGGER_NAME + ".machinePwrUpd"
    logReceivedUpdateWithState.apply(LOGGER, triggeringItem)

    var SwitchItem MachineStateItem
    if( triggeringItem.name.toString.contains('Washing') ) {
        MachineStateItem = LaudryRoom_WashingMachine_RunningState
    } else if( triggeringItem.name.toString.contains('Tumble') ) {
        MachineStateItem = LaudryRoom_TumbleDryer_RunningState
    } else {
        logError(LOGGER, "The item '{}' cannot be handled by this rule!", triggeringItem.name)
    }

    logDebug(LOGGER, "Machine state item to update: {}",MachineStateItem.name)

    val int MACHINE_STATE_LOOKBACKWARDS_MINUTES = 5       // Time look backwards when determinning if machine is running
    val int MACHINE_RUNNING_WHEN_POWER_IS_MORE_THAN = 25  // Watts, below this for configured minutes means machine is stopped
    val int MACHINE_STOPPED_WHEN_POWER_IS_LESS_THAN = 10  // Watts, above this for configured minutes means machine is running

    //val int maxValue = (triggeringItem.maximumSince(now.minusMinutes(MACHINE_STATE_LOOKBACKWARDS_MINUTES),"influxdb").state as DecimalType).intValue
    //val int minValue = (triggeringItem.minimumSince(now.minusMinutes(MACHINE_STATE_LOOKBACKWARDS_MINUTES),"influxdb").state as DecimalType).intValue
    val int avgValue = triggeringItem.averageSince(now.minusMinutes(MACHINE_STATE_LOOKBACKWARDS_MINUTES),"influxdb").intValue
    //logDebug(LOGGER, "maxVal={},minVal={},avgValue={}",maxValue,minValue,avgValue)

    if( avgValue > MACHINE_RUNNING_WHEN_POWER_IS_MORE_THAN ) {
        logDebug(LOGGER, "Posting running state to {}", MachineStateItem.name)
        MachineStateItem.postUpdate(OnOffType::ON)
    } else if( avgValue < MACHINE_STOPPED_WHEN_POWER_IS_LESS_THAN ) {
        logDebug(LOGGER, "Posting stopped state to {}", MachineStateItem.name)
        MachineStateItem.postUpdate(OnOffType::OFF)
    }
end

// When machine changes state
// Notify by pushbullet
// Notify on computer room speaker
rule "Laundry room, washing machine running state changed"
when
    Item LaudryRoom_WashingMachine_RunningState changed
then
    val String LOGGER = LOGGER_NAME + ".washStateChg"
    val String machineName = "washing machine"
    val GenericItem itemChanged = LaudryRoom_WashingMachine_RunningState

    logStateChange.apply(LOGGER, itemChanged)
    val String machineState = transform("MAP", "houshold_items.map", itemChanged.state.toString)

    // Log state and machine
    val String notifyMsg = "The " + machineName + " entered the " + machineState + " state at " + now.toString("HH:mm") + " on " + now.toString("dd MMMM yyyy") + "."
    logInfo(LOGGER, "{}", notifyMsg)

    if( itemChanged.state == OnOffType::OFF) {
        // Notify on pushbullet
        logInfo(LOGGER, "Sending notification: {}", notifyMsg)
        sendPushbulletNote("Openhab: " + machineName + " " + machineState, notifyMsg)

        // Notify on computer room speaker
        val int notifyVolume = 20 // percent
        val String notifyMp3 = "mario-1-up.mp3"
        val String notifySink = "chromecast:chromecast:7ea2b22cb8d648aa8a693283bcea5489" // Computer room speaker
        //val String notifyVoice = "picotts:enUS"
        //val String notifyMessage = "The " + machineName + " just entered the " + machineState + " state."
        playSound(notifySink, notifyMp3, new PercentType(notifyVolume))
        //Thread::sleep(2000)
        //say(notifyMessage, notifyVoice, notifySink, new PercentType(notifyVolume))
    } else {
        logInfo(LOGGER, "No notification will be sent.")
    }
end

// When machine changes state
// Notify by pushbullet
// Notify on computer room speaker
rule "Laundry room, tumble dryer running state changed"
when
    Item LaudryRoom_TumbleDryer_RunningState changed
then
    val String LOGGER = LOGGER_NAME + ".tmblrStateChg"
    val String machineName = "tumble dryer"
    val GenericItem itemChanged = LaudryRoom_TumbleDryer_RunningState

    logStateChange.apply(LOGGER, itemChanged)
    val String machineState = transform("MAP", "houshold_items.map", itemChanged.state.toString)

    // Log state and machine
    val String notifyMsg = "The " + machineName + " entered the " + machineState + " state at " + now.toString("HH:mm") + " on " + now.toString("dd MMMM yyyy") + "."
    logInfo(LOGGER, "{}", notifyMsg)

    if( itemChanged.state == OnOffType::OFF) {
        // Notify on pushbullet
        logInfo(LOGGER, "Sending notification: {}", notifyMsg)
        sendPushbulletNote("Openhab: " + machineName + " " + machineState, notifyMsg)

        // Notify on computer room speaker
        val int notifyVolume = 20 // percent
        val String notifyMp3 = "mario-1-up.mp3"
        val String notifySink = "chromecast:chromecast:7ea2b22cb8d648aa8a693283bcea5489" // Computer room speaker
        //val String notifyVoice = "picotts:enUS"
        //val String notifyMessage = "The " + machineName + " just entered the " + machineState + " state."
        playSound(notifySink, notifyMp3, new PercentType(notifyVolume))
        //Thread::sleep(2000)
        //say(notifyMessage, notifyVoice, notifySink, new PercentType(notifyVolume))
    } else {
        logInfo(LOGGER, "No notification will be sent.")
    }
end

// When set time changes configure the zwave relay with the update value
rule "Laundry room lights, Auto off time changed"
when
    Item LaundryRoom_MainLights_AutoOff_setTime received update
then
    val String LOGGER = LOGGER_NAME + ".autoOffChange"
    logInfo(LOGGER, "Auto off rule triggered")

    val int controlValue = (LaundryRoom_MainLights_AutoOff_setTime.state as DecimalType).intValue
    val int secondsValue = controlValue*60
    logInfo(LOGGER, "Auto off control value: '{}'",controlValue)
    logInfo(LOGGER, "Auto off seconds value: '{}'",secondsValue)

    // Example of how to configure zwave item dynamically using the REST API
    val httpBody = "{'config_11_2':" + secondsValue.toString() + "}"
    logInfo(LOGGER, "Auto off httpBody: '{}'",httpBody)
    sendHttpPutRequest("http://localhost:8080/rest/things/zwave:device:2c3b27f3:node7/config", "application/json", httpBody)
end

// Allow to enable/disable motion triggering
// The zwave group asociation of the motion sensor is reconfigured
rule "Laundry room lights, Motion trigger control change"
when
    Item LaundryRoom_MainLights_MotionTrigger_control changed
then
    val String LOGGER = LOGGER_NAME + ".autoOffEnabledChange"
    val GenericItem itemChanged = LaundryRoom_MainLights_MotionTrigger_control
    logStateChange.apply(LOGGER, itemChanged)

    val MotionTriggerItem = LaundryRoom_MainLights_MotionTrigger_control
    var httpBody = "{'group_2': ['node_7_0']}" // default to ON
    if( MotionTriggerItem.state == OnOffType::ON ) {
        httpBody = "{'group_2': ['node_7_0']}"
    } else if( MotionTriggerItem.state == OnOffType::OFF ) {
        httpBody = "{'group_2': null}"
    } else {
        logUnexpectedState.apply(LOGGER, MotionTriggerItem)
    }

    logInfo(LOGGER, "Auto off enabled httpBody: '{}'",httpBody)
    val httpResult = sendHttpPutRequest("http://localhost:8080/rest/things/zwave:device:2c3b27f3:node9/config", "application/json", httpBody)
    logInfo(LOGGER, "Auto off enabled httpResult: '{}'",httpResult)
end

// Motion triggering should be automatically disabled at night
rule "Laundry room lights, Automatic enable/disable motion trigger"
when
    Time cron "0 0 23 1/1 * ? *" or
    Time cron "0 0 05 1/1 * ? *"
then
    val String LOGGER = LOGGER_NAME + ".autoMotionDisable"
    logInfo(LOGGER, "Auto enable/disable motion rule triggered")
    var Number hour = now.getHourOfDay
    logInfo(LOGGER, "hour: '{}'",hour)

    var msg = "Rule was triggered, hour=" + hour.toString()

    val MotionTriggerItem = LaundryRoom_MainLights_MotionTrigger_control
    if( hour == 23 ) {
        MotionTriggerItem.sendCommand(OnOffType::OFF)
        msg = msg + ", setting motion trigger to 'OFF'"
    } else if( hour == 05 ) {
        MotionTriggerItem.sendCommand(OnOffType::ON)
        msg = msg + ", setting motion trigger to 'ON'"
    } else {
        logError(LOGGER, "The hour '{}' was unexpected!",hour)

        // Default to ON
        MotionTriggerItem.sendCommand(OnOffType::ON)
        msg = msg + ", setting motion trigger to 'DEFAULT'"
    }

    //sendPushbulletNote("Motion trigger schedule", msg)
end

// When the UI control element change state
rule "Laundry room lights, Auto off control item state change"
when
    //Item LaundryRoom_MainLights_AutoOff_control changed
    Item LaundryRoom_MainLights_AutoOff_control received update
then
    val String LOGGER = LOGGER_NAME + ".controlChange"
    //val GenericItem itemChanged = LaundryRoom_MainLights_AutoOff_control
    //logStateChange.apply(LOGGER, itemChanged)
    logReceivedUpdateWithState.apply(LOGGER, triggeringItem)

    //val SwitchItem MainSwitch = Relay_CL_LaundryRoom_MainLights_switch
    val NumberItem AutoOffControlItem = LaundryRoom_MainLights_AutoOff_control
    val NumberItem AutoOffSetTimeItem = LaundryRoom_MainLights_AutoOff_setTime

    val int controlValue = (AutoOffControlItem.state as DecimalType).intValue

    if( controlValue != CONTROL_MODE_NOCHANGE ) {
        // Failsafe default to timer off in case of problems
        if( AutoOffSetTimeItem.state == NULL || AutoOffSetTimeItem.state == UNDEF ) {
            logWarn(LOGGER, "Item '{}' has state NULL or UNDEF!", AutoOffSetTimeItem.name)
            AutoOffSetTimeItem.postUpdate(0)
        }

        // Determine new set time
        // Failsafe default to timer off in case of problems
        var int setTimeValue = 0
        if( AutoOffSetTimeItem.state != NULL && AutoOffSetTimeItem.state != UNDEF ) {
            setTimeValue = (AutoOffSetTimeItem.state as DecimalType).intValue
        } else {
            logWarn(LOGGER, "Item '{}' has state NULL or UNDEF!", AutoOffSetTimeItem.name)
        }
        var int newSetTime = Math.max(0, setTimeValue + controlValue) // never negative
        //logInfo(LOGGER, "controlValue={}, setTimeValue={}, newSetTime={}", controlValue, setTimeValue, newSetTime)
        if( controlValue == CONTROL_MODE_START ) {
            newSetTime = setTimeValue   // no change, just start/restart auto off timer
        } else if( controlValue == CONTROL_MODE_DISABLE) {
            newSetTime = 0              // 0 will result in termination of auto off timer
        }
        logInfo(LOGGER, "setting newSetTime={} minutes", newSetTime)

        // Apply new set time
        AutoOffSetTimeItem.postUpdate(newSetTime)

        // To prevent the UI showing button in "pressed" state
        AutoOffControlItem.postUpdate(CONTROL_MODE_NOCHANGE)
    }
end

// When light sensor data is received
// record date/time
rule "Laundry room light sensor data received"
when
    Item Sensor_CL_LaundryRoom_sensorLuminance received update
then
    val String LOGGER = LOGGER_NAME + ".lightDataReceived"
    logReceivedUpdate.apply(LOGGER, triggeringItem)
    Sensor_CL_LaundryRoom_sensorLuminance_LastReadout.postUpdate(new DateTimeType())
end
