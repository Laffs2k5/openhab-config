// Imports
import org.eclipse.xtext.xbase.lib.Functions // Needed for use of lambda

// Constants
val String  LOGGER_NAME = "cmpterRoom"

// Globals
var int     g_tvBacklight_percent = 0
var int     g_tvBacklight_percent_maxVal = 100
var int     g_tvBacklight_percent_steps = 2
var int     g_tvBacklight_delay_pr_step_millis = 200
var Timer   g_tvBacklight_fade_Timer = null

// Lambdas
val Functions$Function2<String, GenericItem, Boolean> logStateChange = [
    loggerName,
    itemChanged |
    val String LOGGER = loggerName //+ ".stateChange"
    logInfo(LOGGER, "State of item '{}' changed to '{}'",
        itemChanged.name,
        itemChanged.state.toString())
    true
]
val Functions$Function2<String, GenericItem, Boolean> logReceivedUpdateWithState = [
    loggerName,
    itemUpdated |
    val String LOGGER = loggerName //+ ".logReceivedUpdateWithState"
    logInfo(LOGGER, "Item '{}' received update '{}'",
        itemUpdated.name,
        itemUpdated.state)
    true
]

// Dim up/down of baclight is triggered by separate items in order to
// be able to trigger dimming frmo elsewhere as well as by rules in this file
rule "Computer room TV backlight, dim down triggered"
when
    Item ComputerRoom_TvBacklight_DimDown_trigger received update ON
then
    val String LOGGER = LOGGER_NAME + ".tvLightDownTrg"
    logReceivedUpdateWithState.apply(LOGGER, (triggeringItem as GenericItem))
    triggeringItem.postUpdate(OnOffType::OFF)

    val LightBrightnessItem = LedStrip_GF_ComputerRoom_brightness

    logDebug("TvBacklight","Dimmming down")
    if (LightBrightnessItem.state instanceof DecimalType) {
        g_tvBacklight_percent = ((LightBrightnessItem.state as DecimalType) / g_tvBacklight_percent_steps).intValue * g_tvBacklight_percent_steps //round
        g_tvBacklight_fade_Timer = createTimer(now.plusMillis(g_tvBacklight_delay_pr_step_millis)) [|
            LightBrightnessItem.sendCommand(g_tvBacklight_percent)
            if (g_tvBacklight_percent > 0) {
                g_tvBacklight_percent = g_tvBacklight_percent - g_tvBacklight_percent_steps
                logDebug("TvBacklight","Dimmming, decrease {} to {}", g_tvBacklight_percent_steps, g_tvBacklight_percent)
                g_tvBacklight_fade_Timer.reschedule(now.plusMillis(g_tvBacklight_delay_pr_step_millis))
            } else {
                logDebug("TvBacklight","Done dimmming, final brightness is {}", g_tvBacklight_percent)
            }
        ]
    }
end
rule "Computer room TV backlight, dim up triggered"
when
    Item ComputerRoom_TvBacklight_DimUp_trigger received update ON
then
    val String LOGGER = LOGGER_NAME + ".tvLightUpTrg"
    logReceivedUpdateWithState.apply(LOGGER, (triggeringItem as GenericItem))
    triggeringItem.postUpdate(OnOffType::OFF)

    val LightBrightnessItem = LedStrip_GF_ComputerRoom_brightness

    logDebug("TvBacklight","Dimmming up")
    if (LightBrightnessItem.state instanceof DecimalType) {
        g_tvBacklight_percent = ((LightBrightnessItem.state as DecimalType) / g_tvBacklight_percent_steps).intValue * g_tvBacklight_percent_steps //round
        g_tvBacklight_fade_Timer = createTimer(now.plusMillis(g_tvBacklight_delay_pr_step_millis)) [|
            LightBrightnessItem.sendCommand(g_tvBacklight_percent)
            if (g_tvBacklight_percent < g_tvBacklight_percent_maxVal) {
                g_tvBacklight_percent = g_tvBacklight_percent + g_tvBacklight_percent_steps
                logDebug("TvBacklight","Dimmming, increase {} to {}", g_tvBacklight_percent_steps, g_tvBacklight_percent)
                g_tvBacklight_fade_Timer.reschedule(now.plusMillis(g_tvBacklight_delay_pr_step_millis))
            } else {
                logDebug("TvBacklight","Done dimmming, final brightness is {}", g_tvBacklight_percent)
            }
        ]
    }
end

rule "TV backlight controlled by tv online state"
when
    Item Network_GF_ComputerRoom_TV changed from OFF to ON or
    Item Network_GF_ComputerRoom_TV changed from ON to OFF
then
    val String LOGGER = LOGGER_NAME + ".tvState"

    val GenericItem itemChanged = Network_GF_ComputerRoom_TV
    val SwitchItem dimDownItem = ComputerRoom_TvBacklight_DimDown_trigger
    val SwitchItem dimUpItem = ComputerRoom_TvBacklight_DimUp_trigger

    logStateChange.apply(LOGGER, itemChanged)

    if (itemChanged.state==OFF) {
        //  Dim down gently when TV goes offline
        dimDownItem.postUpdate(OnOffType::ON)
    } else if (itemChanged.state==ON) {
        // Dim up gently when TV goes online
        dimUpItem.postUpdate(OnOffType::ON)
    }
end
